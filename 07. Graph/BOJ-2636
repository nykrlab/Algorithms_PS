import collections

n, m = map(int, input().split())
graph = [list(map(int, input().split())) for _ in range(n)]

def bfs():
    queue = collections.deque()
    queue.append((0,0))
    check = [[False] * m for _ in range(n)]
    dx, dy = [-1, 1, 0, 0], [0, 0, -1, 1]    # 상하좌우
    count = 0	# 남은 치즈조각 개수
    
    while queue:
        x, y = queue.popleft()
        # 상하좌우 탐색 
        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]
            if 0 <= nx < n and 0 <= ny < m:
                # 치즈 아님 & 방문 전
                if graph[nx][ny] == 0 and check[nx][ny] == False:
                    check[nx][ny] = True    # 방문처리
                    queue.append((nx,ny))    # queue에 append
                # 만나는 1들은 모두 가장자리 !
                elif graph[nx][ny] == 1:
                    # 0으로 바꿔줘 녹음 처리 
                    # queue에는 넣지 않음 - 넣으면 ) 이번 while문에서 안쪽 치즈까지 녹음처리되므로 
                    graph[nx][ny] = 0
                    count += 1    # 가장자리 개수 세기 
                    check[nx][ny] = True    # 방문처리
    return count

result = []
time = 0
while True:
    count = bfs()    # 가장자리 개수 return 
    result.append(count)
    if count == 0:    # count(가장자리 개수)가 0 = 모든 치즈가 녹음 ! -> break
        break
    time += 1    # count 존재 시, 1일 추가 처리

# 녹아서 없어지는 데 걸리는 시간 출력
print(time)

# 한시간 전 count를 출력 = result[-2]
print(result[-2])
