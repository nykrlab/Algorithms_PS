from collections import deque

m, n = map(int, input().split())
# 모든 토마토 입력받기 
graph = [list(map(int, input().split())) for _ in range(n)]

queue = deque([])

# 상하좌우 이동좌표
dx, dy = [-1, 1, 0, 0], [0, 0, -1, 1]
result = 0

# 익은 토마토 좌표 -> queue에 append
for i in range(n):
    for j in range(m):
        if graph[i][j]==1:
            queue.append([i, j])

def bfs():
	# 익은 토마토가 존재하는 한 
    while queue:
        x, y = queue.popleft()
        
        # 토마토 익히기 (상하좌우)
        for i in range(4):
            nx, ny = x+dx[i], y+dy[i]
            # 범위 내 & 익지않은 토마토 : 날짜 +1 처리 & 익은 토마토 > 큐에 append
            if 0<=nx<n and 0<=ny<m and graph[nx][ny]==0:
                graph[nx][ny] = graph[x][y]+1
                queue.append([nx, ny])

bfs()

for i in graph:
    for j in i:
    	# 익지 않은 토마토 존재 시, -1 출력
        if j==0:
            print(-1)
            exit()
    # 하나의 행 끝날 때마다 갱신         
    result = max(result, max(i))

# 맨 처음, 1로 시작했기 때문에 마지막에 -1한 값을 출력 
print(result-1)
