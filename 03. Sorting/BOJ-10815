#이렇게 요소들을 확인하는 문제는 이진탐색(Binary Search) 문제라고 생각하면 쉽다.
#요소가 엄청 작은 문제가 아닌 이상, 순차 탐색은 시간초과가 나오기 때문에 이분 탐색을 이용하자.

import sys
n = int(input())
card = list(map(int,sys.stdin.readline().split()))
m = int(input())
check = list(map(int, sys.stdin.readline().split()))
            
card.sort()

def binary_search(array,target,start,end):
    while start<=end:
        mid = (start+end)//2
        if array[mid]==target:
            return mid
        elif array[mid]>target:
            end = mid-1
        else:
            start = mid+1
    return None

for i in range(m):
    if binary_search(card, check[i], 0, n-1) is not None:
        print(1, end=' ')
    else:
        print(0, end=' ')
        
        
##############################################################################

#이렇게 요소들을 확인하는 문제는 이진탐색(Binary Search) 문제라고 생각하면 쉽다.
#요소가 엄청 작은 문제가 아닌 이상, 순차 탐색은 시간초과가 나오기 때문에 이분 탐색을 이용하자.

n = int(input())
a = list(map(int,input().split()))
a.sort()

def binary_search(num):
    l = 0
    r = n-1
    while l<=r:
        mid=(l+r)//2
        if a[mid]==num:
            return 1
        elif a[mid]>num:
            r = mid-1
        else:
            l = mid+1
    return 0

m = int(input())
for num in list(map(int, input().split())):
    print(binary_search(num), end=' ')
