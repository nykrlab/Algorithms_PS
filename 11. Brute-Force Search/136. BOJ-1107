target =int(input()) ## 5457
ans=abs(100-target)  # abs() 절댓값 구하는 함수
# 지금 채널이 100번, target이 100보다 커도 > 절댓값 출력
# ++ --로만 이동할 경우 > 최댓값

m = int(input())  ## 3
if m : #고장이 있을 경우에만 인풋 받기
  broken=set(input().split())
else:
  broken=set()

# 작은수에서 큰수로 이동할땐 500,000 까지만 보면 되지만
# 반대로 큰수에서 작은수로 내려올수도 있으므로 1,000,000 까지 봐야함
# 여기서 range를 N의 최대 범위인 500,000이 아닌 그 두 배 1,000,000로 해준 것은, 수빈이가 이동하려는 채널의 범위는 500,000 이하이지만 채널 자체는 무한대라는 점 때문이다.


#만약에 수빈이가 이동하려는 채널이 500,000이고, 리모컨의 숫자 중 1, 2, 3, 4, 5가 고장났다고 가정하자.
#이 때, range의 범위가 500,000으로 제한되면, 시작점인 100번에서 +만 눌러서 500,000까지 도달하는 총 499,900번 버튼을 클릭하게 할 것이다.
#하지만 물론 이것은 최적의 해가 아니다.
#600,000에서 -를 100,000번 눌러 target에 도달하는 것이 최적의 해일 것이다.
#이러한 이유 때문에 range는 1,000,000까지로 설정해주어야 한다.

for num in range(1000001):
  for n in str(num):  # 숫자를 각각 눌러야하므로 str 처리
    if n in broken: # 해당 숫자 누를 수 없을 때 
      break
    else: # can use the button
      ans = min(ans, len(str(num))+abs(num-target))
      # 채널 번호 누른 횟수와 채널번호에서 희망채널까지 +- 눌러야하는 횟수 더해서
      # 이전에 구한 최저횟수(그냥 ++--로 움직일 때_기존ans)보다 적다면 > min 갱신

      # target =int(input()) ## 5457
      # ans=abs(100-target) ## 5357

      # min(5357, len(str(1))+abs(1-5457)) #5357
      # min (535)

print(ans)
